()
dir()
if (!exists("RAW")) {
RAW <- read.table("activity.csv")
}
RAW <- read.csv("activity.csv")
View(RAW)
View(RAW)
str(RAW)
group_by(RAW,date)
RAW %>% group_by(date) %>% summarize(total=sum(steps))
library(dplyr)
View(RAW)
View(RAW)
?which.max
x <- c(1:4, 0:5, 11)
x
which.max(x)
which.min(x)
PerInterval<-RAW %>% group_by(interval) %>% summarize(AvgSteps=mean(steps,na.rm=TRUE))
View(PerInterval)
which.max(PerInterval$AvgSteps,na.rm=TRUE)
MaxsIndex<-which.max(PerInterval$AvgSteps)
IntervalwMax<-PerInterval$AvgSteps[MaxsIndex]
IntervalwMax
IntervalwMax<-PerInterval$interval[MaxsIndex]
IntervalwMax
reg<-lm(steps ~ date + interval, data=RAW)
predict(reg, RAW, interval="prediction", level=0.95)
readyReg<-RAW %>% mutate(date2=as.date(date))
readyReg<-RAW %>% mutate(date2=as.Date(date))
View(readyReg)
reg<-lm(steps ~ date + interval, data=readyReg)
reg
str(reg)
names(reg)
reg$fitted.values
readyReg$predicted<-reg$fitted.values
names(reg)
?lm
predict(reg, readyReg)
reg<-lm(steps ~ date2 + interval, data=readyReg)
predict(reg, readyReg)
readyReg$predicted<-predict(reg, readyReg)
View(readyReg)
reg<-lm(steps ~ interval, data=readyReg)
readyReg$predicted<-predict(reg, readyReg)
View(readyReg)
loessMod50 <- loess(steps ~ interval, data=RAW, span=0.50) # 50% smoothing span
predict(loessMod50)
imputed<-coalesce(RAW$steps,predict(loessMod50))
RAW$steps
predict(loessMod50)
AllPredicted<-predict(loessMod50,RAW$interval)
AllPredictedValues<-predict(loessMod50,RAW$interval)
imputed<-coalesce(RAW$steps,AllPredictedValues)
AllPredictedValues<-as.numeric(predict(loessMod50,RAW$interval))
imputed<-coalesce(RAW$steps,AllPredictedValues)
RAW$steps
str(RAW)
imputed<-coalesce( as.numeric(RAW$steps),AllPredictedValues)
smoothed10 <- loess(steps ~ interval, data=RAW, span=0.10) # 50% smoothing span
smoothed25 <- loess(steps ~ interval, data=RAW, span=0.25) # 50% smoothing span
loessMod50 <- loess(steps ~ interval, data=RAW, span=0.50) # 50% smoothing span
plot(RAW$steps, x=RAW$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=economics$date, col="red")
lines(smoothed25, x=economics$date, col="green")
lines(smoothed50, x=economics$date, col="blue")
plot(RAW$steps, x=RAW$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=RAW$interval, col="red")
lines(smoothed25, x=RAW$interval, col="green")
lines(smoothed50, x=RAW$interval, col="blue")
smoothed50 <- loess(steps ~ interval, data=RAW, span=0.50) # 50% smoothing span
plot(RAW$steps, x=RAW$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
plot(RAW$steps, x=RAW$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
PerInterval<-RAW %>%
group_by(interval) %>%
summarize(AvgSteps=mean(steps,na.rm=TRUE))
plot(RAW$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
smoothed10 <- loess(steps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
smoothed25 <- loess(steps ~ interval, data=PerInterval, span=0.25) # 50% smoothing span
smoothed50 <- loess(steps ~ interval, data=PerInterval, span=0.50) # 50% smoothing span
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
smoothed10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
smoothed25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.25) # 50% smoothing span
smoothed50 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.50) # 50% smoothing span
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
smoothed10
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
loessMod25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.25) # 50% smoothing span
loessMod50 <- loess(steps ~ interval, data=PerInterval, span=0.50) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
loessMod25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.25) # 50% smoothing span
loessMod50 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.50) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
lines(smoothed25, x=PerInterval$interval, col="green")
lines(smoothed50, x=PerInterval$interval, col="blue")
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
loessMod25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.05) # 50% smoothing span
loessMod50 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.001) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
lines(smoothed25, x=PerInterval$interval, col="green")
lines(smoothed50, x=PerInterval$interval, col="blue")
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
loessMod25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.05) # 50% smoothing span
loessMod50 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.01) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
lines(smoothed25, x=PerInterval$interval, col="green")
lines(smoothed50, x=PerInterval$interval, col="blue")
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 50% smoothing span
loessMod25 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.15) # 50% smoothing span
loessMod50 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.20) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
plot(PerInterval$AvgSteps, x=PerInterval$interval, type="l", main="Loess Smoothing and Prediction", xlab="interval", ylab="avg steps")
lines(smoothed10, x=PerInterval$interval, col="red")
lines(smoothed25, x=PerInterval$interval, col="green")
lines(smoothed50, x=PerInterval$interval, col="blue")
AllPredictedValues<-predict(loessMod10,RAW$interval) #all the predictions based on interval
imputed<-coalesce( as.numeric(RAW$steps),AllPredictedValues) #if actual value exists, use it.  otherwise use predicted.
sum(is.na(RAW$steps))
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,imputed))
library(ggplot2)
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,imputed))
PerInterval<-RAW %>%
group_by(interval) %>%
summarize(AvgSteps=mean(steps,na.rm=TRUE))
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 10% smoothing span
loessMod15 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.15) # 15% smoothing span
loessMod20 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.20) # 20% smoothing span
smoothed10 <- predict(loessMod10)
smoothed15 <- predict(loessMod15)
smoothed20 <- predict(loessMod20)
imputed<-coalesce( as.numeric(RAW$steps),AllPredictedValues) #if actual value exists, use it.  otherwise use predicted.
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 10% smoothing span
PerInterval<-RAW %>%
group_by(interval) %>%
summarize(AvgSteps=mean(steps,na.rm=TRUE))
coursera <- "C:/Users/sahutj/Box Sync/Resources/R/Coursera"
course<-"5.ReproducibleResearch"
folder<-"RepData_PeerAssessment1"
f<-file.path(coursera,course,folder)
setwd(f)
RAW <- read.csv("activity.csv")
PerInterval<-RAW %>%
group_by(interval) %>%
summarize(AvgSteps=mean(steps,na.rm=TRUE))
loessMod10 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.10) # 10% smoothing span
loessMod15 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.15) # 15% smoothing span
loessMod20 <- loess(AvgSteps ~ interval, data=PerInterval, span=0.20) # 20% smoothing span
smoothed10 <- predict(loessMod10)
smoothed15 <- predict(loessMod15)
smoothed20 <- predict(loessMod20)
AllPredictedValues<-predict(loessMod10,RAW$interval) #all the predictions based on interval
imputed<-coalesce(as.numeric(RAW$steps),AllPredictedValues) #if actual value exists, use it.  otherwise use predicted.
library(ggplot2)
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,imputed))
smoothed10 <- predict(loessMod10)
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10))
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=3)
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=2)
Imputed<-RAW %>% mutate(StepswImputation=coalesce( as.numeric(RAW$steps),AllPredictedValues) )
View(Imputed)
Imputed<-RAW %>%
mutate(StepswImputation=coalesce( as.numeric(RAW$steps),AllPredictedValues) )%>%
group_by(date) %>%
summarize(TotalSteps=sum(StepswImputation,na.rm=TRUE))
View(Imputed)
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=2)+
scale_color_discrete(name="Legend") +
labs(  x = "Interval"
,y = "Average number of steps"
,title ="Avg number of steps over the 5-min intervals spanning a day")
?theme
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=2)+
theme(legend.key = element_rect(fill = "white", colour = "black"))
labs(  x = "Interval"
,y = "Average number of steps"
,title ="Avg number of steps over the 5-min intervals spanning a day")
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=2)+
scale_fill_discrete(name = "Title",
labels = c("A", "B", "C", "D", "E"))+
labs(  x = "Interval"
,y = "Average number of steps"
,title ="Avg number of steps over the 5-min intervals spanning a day")
ggplot(PerInterval,aes(interval,AvgSteps))+
geom_line()+
geom_line(aes(interval,smoothed10),col="red",lwd=2)+
scale_fill_discrete(name = "Title",
labels = c("A", "B", "C", "D", "E"))
PerDaywImp$TotalSteps
?weekday
?weekday
weekdays
?weekdays
weekday
weekdays(Sys.Date())
# totals per day w/imputation
RAWwImp2<-RAWwImp %>%
mutate(dayofweek=weekdays(as.Date(date))
daytype=if(dayofweek %in% c("Saturday","Sunday"),"weekend","weekday")
?if
?if
?if
# totals per day w/imputation
RAWwImp2<-RAWwImp %>%
# totals per day w/imputation
RAWwImp2<-RAWwImp %>%
mutate(dayofweek=weekdays(as.Date(date))
,daytype=factor(ifelse(dayofweek %in% c("Saturday","Sunday"),"weekend","weekday"))
)
knit2html()
library(knitr)
knit2html()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd")
